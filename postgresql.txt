---Создать представление (view), в котором содержится категория продукта, название продукта и цена за единицу продукта

create view prod_cast as
select product_name, category_name, unit_price from products
left join categories on products.category_id - categories.category_id;

---Используя представление, вывести количество продуктов в каждой категории и общее количество продуктов 

select category_name, count(*) from prod_cat
group by category_name
union all
select '----','-----'
union all
select 'Total', count(*) from prod_cat;

---Cross join

drop table ranks;
drop table suits;
create temporary table ranks(name varchar(2));
create temporary table suits(name2 varchar(10));
INSERT INTO ranks(name) VALUES('6'),('7'),('8'),('9'),('10'),('В'),('Д'),('К'),('Т');
INSERT INTO suits(name2) VALUES ('пики'),('червы'),('бубны'),('трефы');
create temporary table cards as select * from ranks cross join suits; 

create temporary table t1(v1 int);
insert into t1(v1) values (1),(2),(3);
create temporary table t2(v1 int);
insert into t2(v2) values (2),(3),(4);

select v1 from t1
intersect
select v2 from t2;



drop table if exists accounts;
drop table if exists account_changes;

CREATE TABLE accounts ( 
	account_no serial NOT NULL, 
	balance DECIMAL NOT NULL DEFAULT 0,
	PRIMARY KEY(account_no),
        CHECK(balance >= 0)
);

CREATE TABLE account_changes (
	change_no serial PRIMARY KEY,
	account_no INTEGER NOT NULL, 
	flag TEXT NOT NULL, 
	amount DECIMAL NOT NULL, 
	changed_at TEXT NOT NULL 
); 

INSERT INTO accounts (balance) VALUES (2000);
INSERT INTO accounts (balance) VALUES (1000);

BEGIN TRANSACTION;
UPDATE accounts SET balance = balance - 100 WHERE account_no = 100;
UPDATE accounts SET balance = balance + 100 WHERE account_no = 200;
INSERT INTO account_changes(account_no,flag,amount,changed_at) 
VALUES(1,'-',100,now());

INSERT INTO account_changes(account_no,flag,amount,changed_at) 
VALUES(2,'+',100,now());

COMMIT;

select * from accounts;
select * from account_changes;

Снять сумму, превышающую сумму на счету
BEGIN TRANSACTION;
UPDATE accounts
   SET balance = balance - 20000
 WHERE account_no = 100;
INSERT INTO account_changes(account_no,flag,amount,changed_at) 
VALUES(100,'-',20000,datetime('now'));

SELECT * FROM account_changes;

ROLLBACK;


Снять сумму, превышающую сумму на счету
BEGIN TRANSACTION;
UPDATE accounts
   SET balance = balance - 20000
 WHERE account_no = 100;
INSERT INTO account_changes(account_no,flag,amount,changed_at)
VALUES(100,'-',20000,datetime('now'));

SELECT * FROM account_changes;

rollback;



--------Students------


drop table if exists student;
drop table if exists university;

create table university
(
    id integer primary key auto_increment,
    name varchar(160)
);

create table student
(
    id integer primary key auto_increment,
    surname varchar(60),
    name varchar(60),
    univ_id integer,
    foreign key (univ_id) references university (id)
	--on delete RESTRICT on update RESTRICT
    --on delete SET NULL on update SET NULL
    --no action
    --set default
);

insert into university (name) values ('московский физико-технический институт');
insert into university (name) values ('московский государственный университет дизайна и технологии');
insert into university (name) values ('владимирский государственный университет');
insert into university (name) values ('российский университет дружбы народов');
insert into university (name) values ('высшая школа экономики');

insert into student (surname, name, univ_id) values ('сергеев', 'сергей', 1);
insert into student (surname, name, univ_id) values ('клюквина', 'вера', 1);
insert into student (surname, name, univ_id) values ('кийко', 'ирина', 1);
insert into student (surname, name, univ_id) values ('водопьянова', 'виктория', 2);
insert into student (surname, name, univ_id) values ('тимашов', 'дмитрий', 2);
insert into student (surname, name, univ_id) values ('авраменко', 'владислав', 2);
insert into student (surname, name, univ_id) values ('величко', 'алексей', 3);
insert into student (surname, name, univ_id) values ('филипцов', 'артем', 3);
insert into student (surname, name, univ_id) values ('колдаева', 'елена', 3);
insert into student (surname, name, univ_id) values ('антипов', 'андрей', 4);
insert into student (surname, name, univ_id) values ('грачев', 'евгений', 4);
insert into student (surname, name, univ_id) values ('попова', 'дарья', 4);






------30.05.2024--------

----Напишите запрос для получения алфавитного списка продуктов, не снятых с производства
----(discontinued = false) (id и названий).

SELECT product_id,product_name
 FROM products
 WHERE discontinued = 0
 ORDER BY product_name;

----Написать запрос для получения общего количества продуктов,
----количества продуктов, не снятых и снятых с производства

select count (*)
from products
union
select count (*)
from products
where discontinued = 1 or discontinued=0;


----Написать запрос для получения самого дорогого и самого дешевого продукта
----(названия и цену за упаковку).


select product_name, unit_price from products
where unit_price=MAX(unit_price);
union
select MIN(unit_price, product_name)  from products;


---Написать запрос для получения списка продуктов, не снятых с производства,
---для которых стоимость находится в пределах между $15 и $25.


select product_name, unit_price
from products
where discontinued=0 and unit_price between 15.00 and 25.00;


---Написать запрос, в котором вывести список продуктов,
---их категорию и поставщиков (название компании, контактное лицо).


select product_name, category_name, company_name, contact_name
from products inner join suppliers on products.supplier_id=suppliers.supplier_id
inner join categories on categories.category_id=products.category_id;

-----Вывести категории продуктов, поставщиков для каждой категории
-----и количество поставляемых товаров (если это количество больше 1)

SELECT categories.category_name, suppliers.company_name,SUM(units_in_stock)
FROM products
JOIN categories ON
categories.category_id=products.category_id
JOIN suppliers ON
suppliers.supplier_id=products.supplier_id
GROUP BY categories.category_name,suppliers.company_name
HAVING SUM(units_in_stock)>1
ORDER BY category_name;

---Создать триггер, который добавляет в новую таблицу территории
---при добавлении ее в основную таблицу

CREATE TABLE new_territories (
    territory_id character varying(20) NOT NULL PRIMARY KEY,
    territory_description bpchar NOT NULL,
    region_id smallint NOT NULL,
	FOREIGN KEY (region_id) REFERENCES region
);

create trigger new_terr
after insert on territories
begin
    insert into new_territories(territory_description, region_id)
    values (new.territory_description, new.region_id);
end;


select * from territories;



---exists----

SELECT company_name
FROM suppliers
WHERE EXISTS (SELECT product_name FROM products WHERE products.company_name = suppliers.company_name AND price_name < 20);



